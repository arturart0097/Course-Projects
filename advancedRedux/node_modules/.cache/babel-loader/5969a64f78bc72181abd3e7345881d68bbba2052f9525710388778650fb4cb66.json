{"ast":null,"code":"import { configureStore, createSlice } from \"@reduxjs/toolkit\";\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState: {\n    items: [],\n    totalQuantity: 0,\n    showCart: true,\n    notification: null,\n    change: false\n  },\n  reducers: {\n    replaceCart(state, action) {\n      state.totalQuantity = action.payload.totalQuantity;\n      state.items = action.payload.items;\n    },\n    addItemHandler(state, action) {\n      const newItem = action.payload;\n      // if (!state.items) {\n      //   state.items = [];\n      // }\n      const existingItem = state.items.find(el => el.id === newItem.id);\n      state.totalQuantity++;\n      state.change = true;\n      if (!existingItem) {\n        state.items.push({\n          id: newItem.id,\n          title: newItem.title,\n          quantity: 1,\n          price: newItem.price,\n          totalPrice: newItem.price\n        });\n      } else {\n        existingItem.quantity++;\n        existingItem.totalPrice = existingItem.totalPrice + newItem.price;\n      }\n    },\n    removeItemHandler(state, action) {\n      const id = action.payload;\n      const existingItem = state.items.find(el => el.id === id);\n      state.totalQuantity--;\n      state.change = true;\n      if (existingItem.quantity === 1) {\n        state.items = state.items.filter(el => el.id !== id);\n      } else {\n        existingItem.quantity--;\n        existingItem.totalPrice = existingItem.totalPrice - existingItem.price;\n      }\n    },\n    showCartHandler(state) {\n      state.showCart = !state.showCart;\n    },\n    notificationHandler(state, action) {\n      state.notification = {\n        status: action.payload.status,\n        title: action.payload.title,\n        message: action.payload.message\n      };\n    }\n  }\n});\n\n//! send data\n\nexport const sendingData = data => {\n  return async dispatch => {\n    dispatch(cartActions.notificationHandler({\n      status: \"pending\",\n      title: \"Sending...\",\n      message: \"Please wait sending data...\"\n    }));\n    const sendData = async () => {\n      const response = await fetch(\"https://shop-df80d-default-rtdb.europe-west1.firebasedatabase.app/cart.json\", {\n        method: \"PUT\",\n        body: JSON.stringify({\n          items: data.items,\n          totalQuantity: data.totalPrice\n        })\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch data!\");\n      }\n    };\n    try {\n      await sendData();\n      dispatch(cartActions.notificationHandler({\n        status: \"success\",\n        title: \"Success\",\n        message: \"Sending data success!\"\n      }));\n    } catch (error) {\n      dispatch(cartActions.notificationHandler({\n        status: \"error\",\n        title: \"Error\",\n        message: \"Failed sending data!\"\n      }));\n    }\n  };\n};\n\n//! fetch data\n\nexport const fetchingData = () => {\n  return async dispatch => {\n    const fetchData = async () => {\n      const response = await fetch(\"https://shop-df80d-default-rtdb.europe-west1.firebasedatabase.app/cart.json\");\n      if (!response.ok) {\n        throw new Error(\"Failed fetching data!\");\n      }\n      const data = await response.json();\n      return data;\n    };\n    try {\n      const cartData = await fetchData();\n      dispatch(cartActions.replaceCart(cartData));\n    } catch (error) {\n      dispatch(cartActions.notificationHandler({\n        status: \"error\",\n        title: \"Error!\",\n        message: \"Fetching cart data failed!\"\n      }));\n    }\n  };\n};\nconst store = configureStore({\n  reducer: cartSlice.reducer\n});\nexport const cartActions = cartSlice.actions;\nexport default store;","map":{"version":3,"names":["configureStore","createSlice","cartSlice","name","initialState","items","totalQuantity","showCart","notification","change","reducers","replaceCart","state","action","payload","addItemHandler","newItem","existingItem","find","el","id","push","title","quantity","price","totalPrice","removeItemHandler","filter","showCartHandler","notificationHandler","status","message","sendingData","data","dispatch","cartActions","sendData","response","fetch","method","body","JSON","stringify","ok","Error","error","fetchingData","fetchData","json","cartData","store","reducer","actions"],"sources":["C:/Users/Artur/OneDrive/Робочий стіл/qwer/js/react/courseProjects/advancedRedux/src/components/store/index.jsx"],"sourcesContent":["import { configureStore, createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst cartSlice = createSlice({\r\n  name: \"cart\",\r\n  initialState: {\r\n    items: [],\r\n    totalQuantity: 0,\r\n    showCart: true,\r\n    notification: null,\r\n    change: false,\r\n  },\r\n  reducers: {\r\n    replaceCart(state, action) {\r\n      state.totalQuantity = action.payload.totalQuantity;\r\n      state.items = action.payload.items;\r\n    },\r\n    addItemHandler(state, action) {\r\n      const newItem = action.payload;\r\n      // if (!state.items) {\r\n      //   state.items = [];\r\n      // }\r\n      const existingItem = state.items.find((el) => el.id === newItem.id);\r\n      state.totalQuantity++;\r\n      state.change = true;\r\n      if (!existingItem) {\r\n        state.items.push({\r\n          id: newItem.id,\r\n          title: newItem.title,\r\n          quantity: 1,\r\n          price: newItem.price,\r\n          totalPrice: newItem.price,\r\n        });\r\n      } else {\r\n        existingItem.quantity++;\r\n        existingItem.totalPrice = existingItem.totalPrice + newItem.price;\r\n      }\r\n    },\r\n    removeItemHandler(state, action) {\r\n      const id = action.payload;\r\n      const existingItem = state.items.find((el) => el.id === id);\r\n      state.totalQuantity--;\r\n      state.change = true;\r\n      if (existingItem.quantity === 1) {\r\n        state.items = state.items.filter((el) => el.id !== id);\r\n      } else {\r\n        existingItem.quantity--;\r\n        existingItem.totalPrice = existingItem.totalPrice - existingItem.price;\r\n      }\r\n    },\r\n    showCartHandler(state) {\r\n      state.showCart = !state.showCart;\r\n    },\r\n    notificationHandler(state, action) {\r\n      state.notification = {\r\n        status: action.payload.status,\r\n        title: action.payload.title,\r\n        message: action.payload.message,\r\n      };\r\n    },\r\n  },\r\n});\r\n\r\n//! send data\r\n\r\nexport const sendingData = (data) => {\r\n  return async (dispatch) => {\r\n    dispatch(\r\n      cartActions.notificationHandler({\r\n        status: \"pending\",\r\n        title: \"Sending...\",\r\n        message: \"Please wait sending data...\",\r\n      })\r\n    );\r\n\r\n    const sendData = async () => {\r\n      const response = await fetch(\r\n        \"https://shop-df80d-default-rtdb.europe-west1.firebasedatabase.app/cart.json\",\r\n        {\r\n          method: \"PUT\",\r\n          body: JSON.stringify({\r\n            items: data.items, totalQuantity: data.totalPrice\r\n          }),\r\n        }\r\n      );\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"Failed to fetch data!\");\r\n      }\r\n    };\r\n\r\n    try {\r\n      await sendData();\r\n      dispatch(\r\n        cartActions.notificationHandler({\r\n          status: \"success\",\r\n          title: \"Success\",\r\n          message: \"Sending data success!\",\r\n        })\r\n      );\r\n    } catch (error) {\r\n      dispatch(\r\n        cartActions.notificationHandler({\r\n          status: \"error\",\r\n          title: \"Error\",\r\n          message: \"Failed sending data!\",\r\n        })\r\n      );\r\n    }\r\n  };\r\n};\r\n\r\n//! fetch data\r\n\r\nexport const fetchingData = () => {\r\n  return async (dispatch) => {\r\n    const fetchData = async () => {\r\n      const response = await fetch(\r\n        \"https://shop-df80d-default-rtdb.europe-west1.firebasedatabase.app/cart.json\"\r\n      );\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"Failed fetching data!\");\r\n      }\r\n\r\n      const data = await response.json();\r\n\r\n      return data;\r\n    };\r\n\r\n    try {\r\n      const cartData = await fetchData();\r\n      dispatch(cartActions.replaceCart(cartData));\r\n    } catch (error) {\r\n      dispatch(\r\n        cartActions.notificationHandler({\r\n          status: \"error\",\r\n          title: \"Error!\",\r\n          message: \"Fetching cart data failed!\",\r\n        })\r\n      );\r\n    }\r\n  };\r\n};\r\n\r\nconst store = configureStore({\r\n  reducer: cartSlice.reducer,\r\n});\r\n\r\nexport const cartActions = cartSlice.actions;\r\n\r\nexport default store;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}