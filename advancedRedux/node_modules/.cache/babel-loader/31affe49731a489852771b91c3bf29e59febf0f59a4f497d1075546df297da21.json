{"ast":null,"code":"import { configureStore, createSlice } from \"@reduxjs/toolkit\";\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState: {\n    items: [],\n    totalQuantity: 0,\n    showCart: true,\n    notification: null\n  },\n  reducers: {\n    addItemHandler(state, action) {\n      const newItem = action.payload;\n      const existingItem = state.items.find(el => el.id === newItem.id);\n      if (!existingItem) {\n        state.items.push({\n          id: newItem.id,\n          title: newItem.title,\n          quantity: 1,\n          price: newItem.price,\n          totalPrice: newItem.price\n        });\n        state.totalQuantity++;\n      } else {\n        existingItem.quantity++;\n        existingItem.totalPrice = existingItem.totalPrice + newItem.price;\n      }\n    },\n    removeItemHandler(state, action) {\n      const id = action.payload;\n      const existingItem = state.items.find(el => el.id === id);\n      if (existingItem.quantity === 1) {\n        state.items = state.items.filter(el => el.id !== id);\n        state.totalQuantity--;\n      } else {\n        existingItem.quantity--;\n        existingItem.totalPrice = existingItem.totalPrice - existingItem.price;\n      }\n    },\n    showCartHandler(state) {\n      state.showCart = !state.showCart;\n    },\n    notificationHandler(state, action) {\n      state.notification = {\n        status: action.payload.status,\n        title: action.payload.title,\n        message: action.payload.message\n      };\n    }\n  }\n});\nexport const sendingData = data => {\n  re;\n};\nconst store = configureStore({\n  reducer: cartSlice.reducer\n});\nexport const cartActions = cartSlice.actions;\nexport default store;","map":{"version":3,"names":["configureStore","createSlice","cartSlice","name","initialState","items","totalQuantity","showCart","notification","reducers","addItemHandler","state","action","newItem","payload","existingItem","find","el","id","push","title","quantity","price","totalPrice","removeItemHandler","filter","showCartHandler","notificationHandler","status","message","sendingData","data","re","store","reducer","cartActions","actions"],"sources":["C:/Users/Artur/OneDrive/Робочий стіл/qwer/js/react/courseProjects/advancedRedux/src/components/store/index.jsx"],"sourcesContent":["import { configureStore, createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst cartSlice = createSlice({\r\n  name: \"cart\",\r\n  initialState: {\r\n    items: [],\r\n    totalQuantity: 0,\r\n    showCart: true,\r\n    notification: null,\r\n  },\r\n  reducers: {\r\n    addItemHandler(state, action) {\r\n      const newItem = action.payload;\r\n      const existingItem = state.items.find((el) => el.id === newItem.id);\r\n      if (!existingItem) {\r\n        state.items.push({\r\n          id: newItem.id,\r\n          title: newItem.title,\r\n          quantity: 1,\r\n          price: newItem.price,\r\n          totalPrice: newItem.price,\r\n        });\r\n        state.totalQuantity++;\r\n      } else {\r\n        existingItem.quantity++;\r\n        existingItem.totalPrice = existingItem.totalPrice + newItem.price;\r\n      }\r\n    },\r\n    removeItemHandler(state, action) {\r\n      const id = action.payload;\r\n      const existingItem = state.items.find((el) => el.id === id);\r\n      if (existingItem.quantity === 1) {\r\n        state.items = state.items.filter((el) => el.id !== id);\r\n        state.totalQuantity--;\r\n      } else {\r\n        existingItem.quantity--;\r\n        existingItem.totalPrice = existingItem.totalPrice - existingItem.price;\r\n      }\r\n    },\r\n    showCartHandler(state) {\r\n      state.showCart = !state.showCart;\r\n    },\r\n    notificationHandler(state, action) {\r\n      state.notification = {\r\n        status: action.payload.status,\r\n        title: action.payload.title,\r\n        message: action.payload.message,\r\n      };\r\n    },\r\n  },\r\n});\r\n\r\nexport const sendingData = (data) => {\r\n  re\r\n}\r\n\r\nconst store = configureStore({\r\n  reducer: cartSlice.reducer,\r\n});\r\n\r\nexport const cartActions = cartSlice.actions;\r\n\r\nexport default store;\r\n"],"mappings":"AAAA,SAASA,cAAc,EAAEC,WAAW,QAAQ,kBAAkB;AAE9D,MAAMC,SAAS,GAAGD,WAAW,CAAC;EAC5BE,IAAI,EAAE,MAAM;EACZC,YAAY,EAAE;IACZC,KAAK,EAAE,EAAE;IACTC,aAAa,EAAE,CAAC;IAChBC,QAAQ,EAAE,IAAI;IACdC,YAAY,EAAE;EAChB,CAAC;EACDC,QAAQ,EAAE;IACRC,cAAcA,CAACC,KAAK,EAAEC,MAAM,EAAE;MAC5B,MAAMC,OAAO,GAAGD,MAAM,CAACE,OAAO;MAC9B,MAAMC,YAAY,GAAGJ,KAAK,CAACN,KAAK,CAACW,IAAI,CAAEC,EAAE,IAAKA,EAAE,CAACC,EAAE,KAAKL,OAAO,CAACK,EAAE,CAAC;MACnE,IAAI,CAACH,YAAY,EAAE;QACjBJ,KAAK,CAACN,KAAK,CAACc,IAAI,CAAC;UACfD,EAAE,EAAEL,OAAO,CAACK,EAAE;UACdE,KAAK,EAAEP,OAAO,CAACO,KAAK;UACpBC,QAAQ,EAAE,CAAC;UACXC,KAAK,EAAET,OAAO,CAACS,KAAK;UACpBC,UAAU,EAAEV,OAAO,CAACS;QACtB,CAAC,CAAC;QACFX,KAAK,CAACL,aAAa,EAAE;MACvB,CAAC,MAAM;QACLS,YAAY,CAACM,QAAQ,EAAE;QACvBN,YAAY,CAACQ,UAAU,GAAGR,YAAY,CAACQ,UAAU,GAAGV,OAAO,CAACS,KAAK;MACnE;IACF,CAAC;IACDE,iBAAiBA,CAACb,KAAK,EAAEC,MAAM,EAAE;MAC/B,MAAMM,EAAE,GAAGN,MAAM,CAACE,OAAO;MACzB,MAAMC,YAAY,GAAGJ,KAAK,CAACN,KAAK,CAACW,IAAI,CAAEC,EAAE,IAAKA,EAAE,CAACC,EAAE,KAAKA,EAAE,CAAC;MAC3D,IAAIH,YAAY,CAACM,QAAQ,KAAK,CAAC,EAAE;QAC/BV,KAAK,CAACN,KAAK,GAAGM,KAAK,CAACN,KAAK,CAACoB,MAAM,CAAER,EAAE,IAAKA,EAAE,CAACC,EAAE,KAAKA,EAAE,CAAC;QACtDP,KAAK,CAACL,aAAa,EAAE;MACvB,CAAC,MAAM;QACLS,YAAY,CAACM,QAAQ,EAAE;QACvBN,YAAY,CAACQ,UAAU,GAAGR,YAAY,CAACQ,UAAU,GAAGR,YAAY,CAACO,KAAK;MACxE;IACF,CAAC;IACDI,eAAeA,CAACf,KAAK,EAAE;MACrBA,KAAK,CAACJ,QAAQ,GAAG,CAACI,KAAK,CAACJ,QAAQ;IAClC,CAAC;IACDoB,mBAAmBA,CAAChB,KAAK,EAAEC,MAAM,EAAE;MACjCD,KAAK,CAACH,YAAY,GAAG;QACnBoB,MAAM,EAAEhB,MAAM,CAACE,OAAO,CAACc,MAAM;QAC7BR,KAAK,EAAER,MAAM,CAACE,OAAO,CAACM,KAAK;QAC3BS,OAAO,EAAEjB,MAAM,CAACE,OAAO,CAACe;MAC1B,CAAC;IACH;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAMC,WAAW,GAAIC,IAAI,IAAK;EACnCC,EAAE;AACJ,CAAC;AAED,MAAMC,KAAK,GAAGjC,cAAc,CAAC;EAC3BkC,OAAO,EAAEhC,SAAS,CAACgC;AACrB,CAAC,CAAC;AAEF,OAAO,MAAMC,WAAW,GAAGjC,SAAS,CAACkC,OAAO;AAE5C,eAAeH,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}